[
  {
    "objectID": "details/hyperqueue_scheduler.html",
    "href": "details/hyperqueue_scheduler.html",
    "title": "Hyperqueue Job Scheduler on Lab Compute Infrastructure",
    "section": "",
    "text": "HyperQueue is a tool designed to simplify execution of large workflows (task graphs) on HPC clusters. It allows you to execute a large number of tasks in a simple way, without having to manually submit jobs into batch schedulers like Slurm or PBS. You just specify what you want to compute – HyperQueue will automatically ask for computational resources and dynamically load-balance tasks across all allocated nodes and cores. HyperQueue can also work without Slurm/PBS as a general task executor.\n\nDetails on jobs and tasks can be found here."
  },
  {
    "objectID": "details/hyperqueue_scheduler.html#create-a-hq-server-directory",
    "href": "details/hyperqueue_scheduler.html#create-a-hq-server-directory",
    "title": "Hyperqueue Job Scheduler on Lab Compute Infrastructure",
    "section": "2.1 Create a HQ server directory",
    "text": "2.1 Create a HQ server directory\nLogin to the DELL Ubuntu PC using your username and password.\n\nThen create a directory with your username. And copy the hyperqueue hostfile to your HQ directory.\n\nmkdir  -p /mnt/bioinformatics_datasets/${USER}/hyperqueue/logs\ncp /mnt/bioinformatics_datasets/hostfile.txt /mnt/bioinformatics_datasets/${USER}/hyperqueue/hostfile.txt\n\nCreate a config file for your ssh keys, if it doesn’t alreadt exist. Then copy the ssh config template to your new ssh directory.\n\nmkdir ${HOME}/.ssh\ncp /bioinformatics_resources/ssh_config_template.txt ${HOME}/.ssh/config"
  },
  {
    "objectID": "details/hyperqueue_scheduler.html#env-variables",
    "href": "details/hyperqueue_scheduler.html#env-variables",
    "title": "Hyperqueue Job Scheduler on Lab Compute Infrastructure",
    "section": "2.2 ENV variables",
    "text": "2.2 ENV variables\nMust be exported by ~/.bashrc or ~/.bash_profile\nnano ~/.bash_profile\nThen copy the lines below in the the Nano text editor and save the file.\nexport HQ_BASE=/mnt/bioinformatics_datasets/${USER}\nexport HQ_SERVER_DIR=$HQ_BASE/hyperqueue\nexport HQ_JOURNAL=$HQ_BASE/hyperqueue/logs/.hq_journal_${USER}\nexport HQ_HOSTFILE=$HQ_BASE/hyperqueue/hostfile.txt"
  },
  {
    "objectID": "details/hyperqueue_scheduler.html#server-on-dell-ubuntu-pc",
    "href": "details/hyperqueue_scheduler.html#server-on-dell-ubuntu-pc",
    "title": "Hyperqueue Job Scheduler on Lab Compute Infrastructure",
    "section": "2.3 Server on DELL Ubuntu PC",
    "text": "2.3 Server on DELL Ubuntu PC\nUse tmux for running the server in the background. See tmux documentation on how to start and exit a tmux session.\n# start a new tmux session \ntmux new-session -s hq\n\n# check that your environment variables are present\nenv | grep \"HQ\"\nthen disconnect from the tmux session\n# should print out the log information \nhq server start --journal $HQ_JOURNAL\nNext, check the server is still up\n# now check that the server is still running OK\n`hq server info`\n\n\n\n\n\n\n\nServer UID Client host Client port Worker host Worker port Version Pid Start date Journal path\nbTQEQ6 sp-alphafold-ws 36107 sp-alphafold-ws 46789 v0.23.0 1597226 2025-08-08 16:29:01 UTC /mnt/bioinformatics_datasets/${USER}/hyperqueue/logs/.hq_journa\n\n\n\n\n2.3.1 Checking the server status and logs\nhq journal export $HQ_JOURNAL &gt; $(dirname $HQ_JOURNAL)/hq_journal.log"
  },
  {
    "objectID": "details/hyperqueue_scheduler.html#workers",
    "href": "details/hyperqueue_scheduler.html#workers",
    "title": "Hyperqueue Job Scheduler on Lab Compute Infrastructure",
    "section": "2.4 Workers",
    "text": "2.4 Workers\nWe will decide best use of --work-dir and --group options, for now we can start workers with limited options except time-out.\n\n2.4.1 Workers on HP Ubuntu Servers\n\nGenerate SSH key\n\nNeed an SSH remote connect to the bioinfosrv01 and bioinfosrv02. Login to the DELL Ubuntu PC using your username and password. Then inside your home directory, follow the instructions in this document.\n\nCreate a hq server directory\n\nmkdir -p $HOME/.hq-server\n\nmust symlink the access.json to the worker machines\n\nln -s /mnt/bioinformatics_datasets/${USER}/hyperqueue/hq-current/access.json $HOME/.hq-server\n\nUse ssh-deploy to start the worker on the remote machine.\n\nIf you you need to find more information about errors add the following parameter --debug to hq worker command\n# start a new tmux session \ntmux new-session -s hq_worker\n\nhq worker deploy-ssh $HQ_HOSTFILE --show-output &\n\n# disconnect from tmux session \n\ncheck workers are running\n\nhq worker list\nhq worker list --all\n\n\n\n\n\n\n\n\n\n\n\nID\nState\nHostname\nResources\nManager\nManager Job ID\n\n\n1 2\nRUNNING RUNNING\nbioinfosrv01 bioinfosrv02\ncpus 48; mem 251.34 GiB cpus 48; mem 251.34 GiB\nNone None\nN/A N/A"
  },
  {
    "objectID": "details/igv_browser.html",
    "href": "details/igv_browser.html",
    "title": "IGV Genome Browser App",
    "section": "",
    "text": "Use VSCode to remote connect to the PromethION instrument by remote-ssh in vscode. Then launch a locally hosted IGV webserver.\nPlease ask Marika Guercio or Francesca Benini for the remote connection details.\n\n\n\n\n\n\nImportant\n\n\n\n\nSet-up your environment by running these commands:\n\nexport PROJ_DIR=$HOME/Documents/quintarelli_c && source $PROJ_DIR/.bash_profile"
  },
  {
    "objectID": "details/igv_browser.html#igv",
    "href": "details/igv_browser.html#igv",
    "title": "IGV Genome Browser App",
    "section": "",
    "text": "Use VSCode to remote connect to the PromethION instrument by remote-ssh in vscode. Then launch a locally hosted IGV webserver.\nPlease ask Marika Guercio or Francesca Benini for the remote connection details.\n\n\n\n\n\n\nImportant\n\n\n\n\nSet-up your environment by running these commands:\n\nexport PROJ_DIR=$HOME/Documents/quintarelli_c && source $PROJ_DIR/.bash_profile"
  },
  {
    "objectID": "details/igv_browser.html#to-launch-the-application",
    "href": "details/igv_browser.html#to-launch-the-application",
    "title": "IGV Genome Browser App",
    "section": "2 To launch the application",
    "text": "2 To launch the application\n\nOn the commandline enter the following:\n\nIGV_WEBAPP=$PROJ_DIR/opt/igv-webapp.3.0.7\nnpx http-server -t30 -c-1 -a localhost $IGV_WEBAPP\n\nSelect the PORTS tab from the IGV terminal pane.\nRight click (cmd+click on MacOS) on the blue hyperlink localhost:XXXX\nSelect Open in Browser from the pull-down menu\nVCF files and processed WGS data is included in a track called WGS Nanopore T-ALL in the pull down-menu"
  },
  {
    "objectID": "details/igv_browser.html#igv-documentation-and-resources",
    "href": "details/igv_browser.html#igv-documentation-and-resources",
    "title": "IGV Genome Browser App",
    "section": "3 IGV Documentation and Resources",
    "text": "3 IGV Documentation and Resources\n\nShort video tutorials\nIGV Application User Guide\n\n\nThe web application uses the same user guide as the desktop application\n\n\nIGV Web application documentation\n\n\nMainly for deployment docs"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Welcome to the Meshinchi Lab at Fred Hutch\nOur research laboratory is studying genomic expression of acute myeloid leukemia-restricted targets on the cell surface that are ideal for immunotherapeutic targeting with chimeric antigen receptor T-cell (CAR T) therapies, as well as identifying and validating target genes for further immunotherapy development.\nCurrently, Soheil Meshinchi, M.D., Ph.D., working in collaboration with Franco Locatelli, M.D., Ph.D. and Concetta Quintarelli, M.D., Ph.D. at the Bambino Gesù Children’s Hospital IRCCS in Rome, Italy, we are investigating the potential of CAR T-cell therapy in pediatric acute myeloid leukemia (AML) and T-Cell Acute Lymphoblastic Leukemia (T-ALL) patients.\n\n \n\n\n\n\n\n\n\nAbout\n\n\n\nThe Meshinchi and Locatelli Lab Group documentation for creating, maintaining, and contributing to the Meshinchi and Locatelli Lab’s software and data analysis pipelines on github.\n\n\n\n\nContact\n\nFred Hutch\nSoheil Meshinchi\nRhonda Ries\n\n\nOPBG\nFranco Locatelli\nConcetta Quintarelli"
  },
  {
    "objectID": "code_review.html",
    "href": "code_review.html",
    "title": "Code Review",
    "section": "",
    "text": "These meetings are truly team gatherings and are designed to be a learning environment. Since, everyone will have different levels of experience using these tools, a primary tenet of these meetings will be repetition of our processes so that we can work together effectively and adapt as needed.\nWe will model our code review style using this document. The most important sections are highlighted below.\nWe will prioritize:\n\nPositive and actionable feedback\nEmpathize and have an open mind\nLeave comments in your code\nAdd references and examples\n\nWe will also reference this checklist and modify this as needed for bioinformatics coding.",
    "crumbs": [
      "Home",
      "Code Review"
    ]
  },
  {
    "objectID": "code_review.html#guidelines",
    "href": "code_review.html#guidelines",
    "title": "Code Review",
    "section": "",
    "text": "These meetings are truly team gatherings and are designed to be a learning environment. Since, everyone will have different levels of experience using these tools, a primary tenet of these meetings will be repetition of our processes so that we can work together effectively and adapt as needed.\nWe will model our code review style using this document. The most important sections are highlighted below.\nWe will prioritize:\n\nPositive and actionable feedback\nEmpathize and have an open mind\nLeave comments in your code\nAdd references and examples\n\nWe will also reference this checklist and modify this as needed for bioinformatics coding.",
    "crumbs": [
      "Home",
      "Code Review"
    ]
  },
  {
    "objectID": "code_review.html#overview",
    "href": "code_review.html#overview",
    "title": "Code Review",
    "section": "2 Overview",
    "text": "2 Overview\n\n2.1 Agendas\nMeeting agendas will be hosted on the github repository “contributing guidelines” discussions section.\nIf you have any questions or suggestions, please post them discussions section as well! This will be an evolving process as we develop our own bioinformatics team best practices.\n\n\n2.2 Meeting Descriptions\nThere are two Microsoft Teams recurring meeting series for git and github. In general, meetings will always have a virtual component in order to share our screens and easily view each others code.\n\n“Code Review - paired programming”:\n\n\nFrequency: 1x a week on Wednesdays\nDescription:\n\nfocused on gaining experience and familiarity with using git, gh github CLI commands, and github web features.\nreview our commits and commit history together\npush changes to the lab github organization\n\n\n\n“Code Review - formal review”:\n\n\nFrequency: 1x every 3 weeks\nDescription:\n\na more in-depth discussion of the technical components of our code\nask specific questions and troubleshoot errors\nget feedback on how to improve the efficiency of our code",
    "crumbs": [
      "Home",
      "Code Review"
    ]
  },
  {
    "objectID": "code_review.html#code-review---paired-programming",
    "href": "code_review.html#code-review---paired-programming",
    "title": "Code Review",
    "section": "3 Code Review - paired programming",
    "text": "3 Code Review - paired programming\nWeekly code review / code commit gatherings to ensure: - only committing changes that we expect - have not added any files that may not belong on github, such as PDFs or power point presentations - have not added any sensitive data.\n\n3.1 Meeting Format:\n\nOpen questions (10 min)\nWe will work in pairs to commit changes, review our commit history and which files should be hosted on github (35 min)\nPush changes to the lab github repositories (15 min)\n\n\n\n3.2 Git and Github\n\nReview our diffs and commit history\n\n\nVSCode\nRStudio\n\nREPO=\"Meshinchi-Lab/2025.06.23_Example_Repo\"\ncd $REPO\ngit status\ngit diff\n\nOnce we all completed the code review / code commit partner checks, then you can push changes to the repository.\n\ngit push \n\ncheck that the repository looks the way you expect it to look using the following command:\n\ngh repo view --web \"$REPO\"",
    "crumbs": [
      "Home",
      "Code Review"
    ]
  },
  {
    "objectID": "code_review.html#code-review---formal-review",
    "href": "code_review.html#code-review---formal-review",
    "title": "Code Review",
    "section": "4 Code Review - formal review",
    "text": "4 Code Review - formal review\nA 1x every 3 weeks recurring code review meeting for the bioinformatics team to discuss questions, troubleshoot code, and make code improvements.\n\n4.1 Meeting Format\n\nOpen questions (10 min)\nPresentation of code by person 1 (15 min)\nPresentation of code by person 2 (15 min)\nPresentation of code by person 3 (15 min)\nRecap on what changes to be made (5 min)\n\nWe will then wait until the following “Paired Programming” meeting to push any changes.",
    "crumbs": [
      "Home",
      "Code Review"
    ]
  },
  {
    "objectID": "data_management.html",
    "href": "data_management.html",
    "title": "Define Data and File Locations",
    "section": "",
    "text": "0001_raw_data/quintarelli_c/benini_f/ 0001_raw_data/quintarelli_c/benini_f/T-ALL/WTS— 0001_raw_data/quintarelli_c/benini_f/T-ALL/FB_2025_00002321314 0001_raw_data/quintarelli_c/guercio_m/CART-GD2-mbIL15/BaseSPACE-XXXXX/\n\n\n0003_ngs_analysis/quintarelli_c/benini_f/T-ALL/2025.06.02_RNAseq_Bulk_T-ALL - save cleaned metadata to 2025.07.18_{**AIEOP-BFM_T-ALL_bulk_RNAseq**}_libraries_sample_annots.tsv - save cleaned rnaseq counts to 0004_ngs_processesed/quintarelli_c/benini_f/T-ALL/2025.07.18_AIEOP-BFM_T-ALL_bulk_RNAseq_feature_counts_raw_counts.csv\n0003_ngs_analysis/quintarelli_c/benini_f/T-ALL/2025.07.18_RNAseq_Bulk_T-ALL_quant - read in cleaned metadata - dont repeat the cleaning step - read in 0002_metadata/quintarelli_c/benini_f/T-ALL/2025.07.18_{**AIEOP-BFM_T-ALL_bulk_RNAseq**}_libraries_sample_annots.tsv\n0003_ngs_analysis/quintarelli_c/benini_f/T-ALL/2025.11.20_RNAseq_bulk_WGNA - read in 0002_metadata/quintarelli_c/benini_f/T-ALL/2025.07.18_{**AIEOP-BFM_T-ALL_bulk_RNAseq**}_libraries_sample_annots.tsv - read in cleaned rnaseq counts from 0004_ngs_processesed/quintarelli_c/benini_f/T-ALL/2025.07.18_AIEOP-BFM_T-ALL_bulk_RNAseq_feature_counts_raw_counts.csv\n\n\n\n0002_metadata/quintarelli_c/benini_f/T-ALL/ - 2025.07.18_{AIEOP-BFM_T-ALL_bulk_RNAseq}libraries_sample_annots.tsv - 2025.10.01{AIEOP-BFM_T-ALL_genomic_characterization_NGS}libraries_sample_annots.tsv - 2025.10.15{AIEOP-BFM_T-ALL_genomic_characterization_NGS}_libraries_sample_annots.tsv\nwithin {2025.07.18_AIEOP-BFM_T-ALL_bulk_RNAseq}_libraries_sample_annots.tsv - SOURCE raw data directory in a column:\nsample_id, source_data, data_type TALL1_S1, 0001_raw_data/quintarelli_c/benini_f/T-ALL/FB_2025_00002321314\n\nuse tsv (tab separated) to avoid import into EXCEL by default\n\n0002_metadata/quintarelli_c/guercio_m/CART-GD2/ - 2025.05.01_{TOR_VERGATA_CART_GD2_Thesis_RNAseq}libraries_sample_annotations.tsv - 2025.11.06{TOR_VERGATA_CART_GD2_Thesis_RNAseq}_libraries_sample_annotations.tsv\n\n\n0004_ngs_processesed/quintarelli_c/benini_f/T-ALL/ - 2025.07.18_AIEOP-BFM_T-ALL_bulk_RNAseq_feature_counts_raw_counts.csv"
  },
  {
    "objectID": "data_management.html#step-1-data-dump",
    "href": "data_management.html#step-1-data-dump",
    "title": "Define Data and File Locations",
    "section": "",
    "text": "0001_raw_data/quintarelli_c/benini_f/ 0001_raw_data/quintarelli_c/benini_f/T-ALL/WTS— 0001_raw_data/quintarelli_c/benini_f/T-ALL/FB_2025_00002321314 0001_raw_data/quintarelli_c/guercio_m/CART-GD2-mbIL15/BaseSPACE-XXXXX/\n\n\n0003_ngs_analysis/quintarelli_c/benini_f/T-ALL/2025.06.02_RNAseq_Bulk_T-ALL - save cleaned metadata to 2025.07.18_{**AIEOP-BFM_T-ALL_bulk_RNAseq**}_libraries_sample_annots.tsv - save cleaned rnaseq counts to 0004_ngs_processesed/quintarelli_c/benini_f/T-ALL/2025.07.18_AIEOP-BFM_T-ALL_bulk_RNAseq_feature_counts_raw_counts.csv\n0003_ngs_analysis/quintarelli_c/benini_f/T-ALL/2025.07.18_RNAseq_Bulk_T-ALL_quant - read in cleaned metadata - dont repeat the cleaning step - read in 0002_metadata/quintarelli_c/benini_f/T-ALL/2025.07.18_{**AIEOP-BFM_T-ALL_bulk_RNAseq**}_libraries_sample_annots.tsv\n0003_ngs_analysis/quintarelli_c/benini_f/T-ALL/2025.11.20_RNAseq_bulk_WGNA - read in 0002_metadata/quintarelli_c/benini_f/T-ALL/2025.07.18_{**AIEOP-BFM_T-ALL_bulk_RNAseq**}_libraries_sample_annots.tsv - read in cleaned rnaseq counts from 0004_ngs_processesed/quintarelli_c/benini_f/T-ALL/2025.07.18_AIEOP-BFM_T-ALL_bulk_RNAseq_feature_counts_raw_counts.csv\n\n\n\n0002_metadata/quintarelli_c/benini_f/T-ALL/ - 2025.07.18_{AIEOP-BFM_T-ALL_bulk_RNAseq}libraries_sample_annots.tsv - 2025.10.01{AIEOP-BFM_T-ALL_genomic_characterization_NGS}libraries_sample_annots.tsv - 2025.10.15{AIEOP-BFM_T-ALL_genomic_characterization_NGS}_libraries_sample_annots.tsv\nwithin {2025.07.18_AIEOP-BFM_T-ALL_bulk_RNAseq}_libraries_sample_annots.tsv - SOURCE raw data directory in a column:\nsample_id, source_data, data_type TALL1_S1, 0001_raw_data/quintarelli_c/benini_f/T-ALL/FB_2025_00002321314\n\nuse tsv (tab separated) to avoid import into EXCEL by default\n\n0002_metadata/quintarelli_c/guercio_m/CART-GD2/ - 2025.05.01_{TOR_VERGATA_CART_GD2_Thesis_RNAseq}libraries_sample_annotations.tsv - 2025.11.06{TOR_VERGATA_CART_GD2_Thesis_RNAseq}_libraries_sample_annotations.tsv\n\n\n0004_ngs_processesed/quintarelli_c/benini_f/T-ALL/ - 2025.07.18_AIEOP-BFM_T-ALL_bulk_RNAseq_feature_counts_raw_counts.csv"
  },
  {
    "objectID": "prerequisites.html",
    "href": "prerequisites.html",
    "title": "Software Dependencies and Pre-requisites",
    "section": "",
    "text": "Overview\n\n\n\nThis page contains README’s and internal lab documentation on how to contribute to the Meshinchi lab and Locatelli lab github organizations. Be sure to have the software requirements installed in order to use this guide.",
    "crumbs": [
      "Home",
      "Software Dependencies and Pre-requisites"
    ]
  },
  {
    "objectID": "prerequisites.html#operating-system",
    "href": "prerequisites.html#operating-system",
    "title": "Software Dependencies and Pre-requisites",
    "section": "Operating System",
    "text": "Operating System\nThese steps can be followed using a Linux operating system, like Ubuntu, or on macbook with MacOS.\n\n\n\n\n\n\nImportant\n\n\n\nTeam members with Windows PCs will need to use WSL to follow these installation instructions.\nSee Installation of Software on Windows WSL for detailed instructions.",
    "crumbs": [
      "Home",
      "Software Dependencies and Pre-requisites"
    ]
  },
  {
    "objectID": "prerequisites.html#software",
    "href": "prerequisites.html#software",
    "title": "Software Dependencies and Pre-requisites",
    "section": "Software",
    "text": "Software\nWe will be using R, Python, git, gh, and Quarto, with the integrated development editors (IDE) Rstudio and VSCode. Click on the links below to install the required software.\n\n\nR and Rstudio\nPython\nGithub CLI\nQuarto CLI\nVisual Studio Code\n\nAlternatively, use Posit cloud (formerly Rstudio Cloud). Posit cloud is free of charge for personal users, yet you need to sign up for a new user account and have internet connection.\n\nVS Code Extensions\nInstall the Quarto Extension for VS Code provides a variety of tools for working with .qmd files in VS Code. The extension integrates directly with the Python Extension to add Python-specific capabilities.\n\n\nGit and Github\nTo get started, you will need to authenticate your access to the lab github organization so that you can create repositories and push changes.\n\n\n\n\n\n\nImportant\n\n\n\nYour github account (also known as your github profile), must be invited to the lab github organization before this can be completed.\n\n\n\nSet-up a Github Account and get added as a member to the Lab organization\n\nGithub profiles should have a clear/professional profile photo to ensure that profiles look complete and reliable. Also, each account will need to set-up 2FA (2 factor authentication).\n\nConfigure git for your github username and email account associated with your github account.\n\nOpen a new a new terminal and enter the following commands.\n# print out the current configuration \ngit config --global --list\n# if not already set, configure them. This example assumes you are using a gmail account.\ngit config --global user.name MY_GITHUB_USERNAME\ngit config --global user.email MY_GITHUB_EMAIL@gmail.com\ngit config --global init.defaultbranch main\n\nAuthenticate the gh CLI tool to connect to the lab github organization.\n\nEnter the following commands in the terminal. You will be prompted to ? Authenticate Git with your GitHub credentials? (Y/n) and select ‘Yes’. Follow the prompts on the command line to open a new web browser window to enter your username and password for github.\n# login to github using a web browser\ngh auth login --git-protocol 'HTTPS' --hostname GitHub.com --web\n\n# check that you are now authenticated\ngh auth status\nOnce you see this message that you are logged in, you were successfully authenticated.\n\n✓ Logged in to github.com account MY_GITHUB_USERNAME (keyring) - Active account: true - Git operations protocol: https - Token: gho_************************************ - Token scopes: ‘gist’, ‘read:org’, ‘repo’, ‘workflow’\n\n\n\nData\nThe lab NGS datasets we use can be found here (insert link).\n\n\nCode\nThe R and Python packages, scripts, analysis notebooks, and data processing pipelines can be found at the Meshichi Lab github organization.\nRepositories have the following nomenclature for easy searching:\n\nData Analysis and Research Projects with collaborators:\n\n[YEAR.MONTH.DAY]_[DATA-TYPE]_[SHORT-DESCRIPTION]\n\nExample: ‘2025.06.02_RNAseq_Bulk_T-ALL’\nExample with two data types: ‘2025.06.02_RNAseq_WGS_Bulk_T-ALL’\n\n\nGenomic Data pipelines and workflows:\n\n[DATA-TYPE]_[DATA-PROCESSING]_[WORKFLOW-TYPE]\n\nExample: ‘RNAseq_Fusion_Calling_Nextflow’\n\n\nR packages:\n\n[SHORT-NAME]_R_Package\n\nExample: ‘DeGSEA_R_Package’\n\n\nPython packages:\n\n[SHORT-NAME]_Py_Package\n\nExample: ‘DataValidator_Py_Package’\n\n\n\n\n\nGetting Started\nSee the Getting Started page for the next steps to generate a new analysis or workflow code repository on the github.\nIf you still need to gain a working knowledge of using bash, R, and Python, then see the following Resources section below.\n\n\nResources\n\nBash and Command Line Tutorial\nA good place to start getting familair with common bash commands is to read the following tutorial. Be sure to complete the exercises in the box at the bottom of each page, starting with the ls command.\nFor more intermediate bash scripting, you can follow the tutorial here.s\n\n\nQuarto and Visual Studio Code Quick Start\nThe quarto CLI with VS Code editor quick start is a great tutorial to get familiarized with using quarto (.qmd) documents to generate exploratory analysis notebooks and reports.\n\n\nR and Rstudio Tutorial\nThe RStudio user guide can help you get started with the RStudio user interface, installing your first packages, and generating a quick plot using data.\nDetailed descriptions of the RStudio panels, panes, and tabsets can be found here as well.\n\n\nPython Tutorial\nStart by learning how the VS Code editor displays and runs python code.\nNext, you can follow along with the python tutorial using both the VS Code editor and interactively in a web browser by using the ‘try it yourself’ buttons.",
    "crumbs": [
      "Home",
      "Software Dependencies and Pre-requisites"
    ]
  },
  {
    "objectID": "prerequisites.html#vs-code-extensions",
    "href": "prerequisites.html#vs-code-extensions",
    "title": "Software Dependencies and Pre-requisites",
    "section": "VS Code Extensions",
    "text": "VS Code Extensions\nInstall the Quarto Extension for VS Code provides a variety of tools for working with .qmd files in VS Code. The extension integrates directly with the Python Extension to add Python-specific capabilities.",
    "crumbs": [
      "Home",
      "Software Dependencies and Pre-requisites"
    ]
  },
  {
    "objectID": "prerequisites.html#git-and-github",
    "href": "prerequisites.html#git-and-github",
    "title": "Software Dependencies and Pre-requisites",
    "section": "Git and Github",
    "text": "Git and Github\nTo get started, you will need to authenticate your access to the lab github organization so that you can create repositories and push changes.\n\n\n\n\n\n\nImportant\n\n\n\nYour github account (also known as your github profile), must be invited to the lab github organization before this can be completed.\n\n\n\nSet-up a Github Account and get added as a member to the Lab organization\n\nGithub profiles should have a clear/professional profile photo to ensure that profiles look complete and reliable. Also, each account will need to set-up 2FA (2 factor authentication).\n\nConfigure git for your github username and email account associated with your github account.\n\nOpen a new a new terminal and enter the following commands.\n# print out the current configuration \ngit config --global --list\n# if not already set, configure them. This example assumes you are using a gmail account.\ngit config --global user.name MY_GITHUB_USERNAME\ngit config --global user.email MY_GITHUB_EMAIL@gmail.com\ngit config --global init.defaultbranch main\n\nAuthenticate the gh CLI tool to connect to the lab github organization.\n\nEnter the following commands in the terminal. You will be prompted to ? Authenticate Git with your GitHub credentials? (Y/n) and select ‘Yes’. Follow the prompts on the command line to open a new web browser window to enter your username and password for github.\n# login to github using a web browser\ngh auth login --git-protocol 'HTTPS' --hostname GitHub.com --web\n\n# check that you are now authenticated\ngh auth status\nOnce you see this message that you are logged in, you were successfully authenticated.\n\n✓ Logged in to github.com account MY_GITHUB_USERNAME (keyring) - Active account: true - Git operations protocol: https - Token: gho_************************************ - Token scopes: ‘gist’, ‘read:org’, ‘repo’, ‘workflow’",
    "crumbs": [
      "Home",
      "Software Dependencies and Pre-requisites"
    ]
  },
  {
    "objectID": "prerequisites.html#data",
    "href": "prerequisites.html#data",
    "title": "Software Dependencies and Pre-requisites",
    "section": "Data",
    "text": "Data\nThe lab NGS datasets we use can be found here (insert link).",
    "crumbs": [
      "Home",
      "Software Dependencies and Pre-requisites"
    ]
  },
  {
    "objectID": "prerequisites.html#code",
    "href": "prerequisites.html#code",
    "title": "Software Dependencies and Pre-requisites",
    "section": "Code",
    "text": "Code\nThe R and Python packages, scripts, analysis notebooks, and data processing pipelines can be found at the Meshichi Lab github organization.\nRepositories have the following nomenclature for easy searching:\n\nData Analysis and Research Projects with collaborators:\n\n[YEAR.MONTH.DAY]_[DATA-TYPE]_[SHORT-DESCRIPTION]\n\nExample: ‘2025.06.02_RNAseq_Bulk_T-ALL’\nExample with two data types: ‘2025.06.02_RNAseq_WGS_Bulk_T-ALL’\n\n\nGenomic Data pipelines and workflows:\n\n[DATA-TYPE]_[DATA-PROCESSING]_[WORKFLOW-TYPE]\n\nExample: ‘RNAseq_Fusion_Calling_Nextflow’\n\n\nR packages:\n\n[SHORT-NAME]_R_Package\n\nExample: ‘DeGSEA_R_Package’\n\n\nPython packages:\n\n[SHORT-NAME]_Py_Package\n\nExample: ‘DataValidator_Py_Package’",
    "crumbs": [
      "Home",
      "Software Dependencies and Pre-requisites"
    ]
  },
  {
    "objectID": "prerequisites.html#getting-started",
    "href": "prerequisites.html#getting-started",
    "title": "Software Dependencies and Pre-requisites",
    "section": "Getting Started",
    "text": "Getting Started\nSee the Getting Started page for the next steps to generate a new analysis or workflow code repository on the github.\nIf you still need to gain a working knowledge of using bash, R, and Python, then see the following Resources section below.",
    "crumbs": [
      "Home",
      "Software Dependencies and Pre-requisites"
    ]
  },
  {
    "objectID": "prerequisites.html#resources",
    "href": "prerequisites.html#resources",
    "title": "Software Dependencies and Pre-requisites",
    "section": "Resources",
    "text": "Resources\n\nBash and Command Line Tutorial\nA good place to start getting familair with common bash commands is to read the following tutorial. Be sure to complete the exercises in the box at the bottom of each page, starting with the ls command.\nFor more intermediate bash scripting, you can follow the tutorial here.s\n\n\nQuarto and Visual Studio Code Quick Start\nThe quarto CLI with VS Code editor quick start is a great tutorial to get familiarized with using quarto (.qmd) documents to generate exploratory analysis notebooks and reports.\n\n\nR and Rstudio Tutorial\nThe RStudio user guide can help you get started with the RStudio user interface, installing your first packages, and generating a quick plot using data.\nDetailed descriptions of the RStudio panels, panes, and tabsets can be found here as well.\n\n\nPython Tutorial\nStart by learning how the VS Code editor displays and runs python code.\nNext, you can follow along with the python tutorial using both the VS Code editor and interactively in a web browser by using the ‘try it yourself’ buttons.",
    "crumbs": [
      "Home",
      "Software Dependencies and Pre-requisites"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Meshinchi and Locatelli Github Contributing Guidelines",
    "section": "",
    "text": "This website is for documenting how to contribute to the Meshinchi and Locatelli Lab github organization(s).\n\n\n\n\n\n\n\nWelcome!\n\nThe goal of the lab documentation is to provide standardized procedures for creating, maintaining, and contributing to the Meshinchi and Locatelli Lab’s software and data analysis pipelines on github.\nAnalysis code and pipelines can be found in the lab github repository.\n\n\nObjectives\nLab members will be able to understand key concepts and have standardized workflows for using:\n\ncreating standardized github repositories\nusing git command line utility for version control\nusing github remote repository to host code and pipelines\ncreating standardized R Rmarkdown and quarto documents\ncreating standardized Python jupyter notebooks for analysis\nbest practices in security\nbest practices in code reviews\n\n\n\nPre-requisites\n\nfamiliarity with bash\nfamiliarity using the command line\nBasic knowledge of R and Python\n\n\n\n\nResources\n\n\n\n\n\n\nBash and using the command line interface\n\n\n\nIf you still need to gain basic working knowledge of using bash and the command line (terminal), then see the following tutorials in the resources section before following these steps."
  },
  {
    "objectID": "git_github_overview.html",
    "href": "git_github_overview.html",
    "title": "Getting Started",
    "section": "",
    "text": "Standardization of Code Repositories\n\n\n\n\nNaming conventions for github repositories\nInitializing the code repository using git and github\nUsing data analysis quarto templates",
    "crumbs": [
      "Home",
      "Getting Started"
    ]
  },
  {
    "objectID": "git_github_overview.html#github-repository-naming-conventions",
    "href": "git_github_overview.html#github-repository-naming-conventions",
    "title": "Getting Started",
    "section": "1 Github Repository Naming Conventions",
    "text": "1 Github Repository Naming Conventions\nRepositories have the following nomenclature for easy searching:\n\nExploratory Data Analysis and Research Projects with collaborators:\n\n[YEAR.MONTH.DAY]_[DATA-TYPE]_[SHORT-DESCRIPTION]\n\nExample: ‘2025.06.02_RNAseq_Bulk_T-ALL’\nExample: with two data types: ‘2025.06.02_RNAseq_WGS_Bulk_T-ALL’\n\n\nGenomic Data pipelines and workflows:\n\n[DATA-TYPE]_[DATA-PROCESSING]_[WORKFLOW-TYPE]\n\nExample: ‘RNAseq_Fusion_Calling_Nextflow’\n\n\nR packages:\n\n[SHORT-NAME]_R_Package\n\nExample: ‘DeGSEA_R_Package’\n\n\nPython packages:\n\n[SHORT-NAME]_Py_Package\n\nExample: ‘DataValidator_Py_Package’\n\n\n\n\n1.1 Example\n\nFirst create a folder (directory) name following the standardized naming conventions listed above.\n\nDATA_TYPE=\"RNAseq\" \nDESCRIPTION=\"Example_Repo\" \nOUTDIR=\"$(date +%Y.%m.%d)_${DATA_TYPE}_${DESCRIPTION}\"\n\necho $OUTDIR\nThis will create a variable that is has the value set as the string 2025.06.17_RNAseq_Example_Repo.",
    "crumbs": [
      "Home",
      "Getting Started"
    ]
  },
  {
    "objectID": "git_github_overview.html#create-the-data-analysis-notebook-template",
    "href": "git_github_overview.html#create-the-data-analysis-notebook-template",
    "title": "Getting Started",
    "section": "2 Create the Data Analysis Notebook Template",
    "text": "2 Create the Data Analysis Notebook Template\n\nRPython\n\n\n\nCreate a private remote repository in the Meshinchi-Lab lab github organization.\n\nThen repository name format is the organization name Meshinchi-Lab/ followed by the name of the analysis directory you just created.\nREPO=\"Meshinchi-Lab/${OUTDIR}\"\n\necho $REPO\nThis will create a variable that is set as the string Meshinchi-Lab/2025.06.17_RNAseq_Example_Repo.\ngh repo create $REPO \\\n--description \"An example R analysis template repo\" \\\n--template \"Meshinchi-Lab/r_analysis_template\" \\\n--clone \\\n--private\nIf gh repo create command is successful, you will see:\n\n✓ Created repository Meshinchi-Lab/2025.06.16_RNAseq_Example_Repo on GitHub https://github.com/Meshinchi-Lab/2025.06.16_RNAseq_Example_Repo ✓ Added remote https://github.com/Meshinchi-Lab/2025.06.16_RNAseq_Example_Repo.git\n\n\nChange directories (cd) into the new github repository you’ve just cloned (by using the --clone argument in step 1).\n\nMake sure to use git pull in order to have your local repository in sync with your new local repository.\ncd $OUTDIR && git pull origin main\n\nUse the quarto CLI to download the quarto markdown template and follow the prompts:\n\n\n? Do you trust the authors of this template (Y/n) › Yes\n? Create a subdirectory for template? (Y/n) › No\n\nquarto use template Meshinchi-Lab/r_analysis_template\nYou will see the following output:\n\nDownloading [###################################] 0.0\n\n\n[✓] Downloading\n\n\n[✓] Unzipping\n\n\nPreparing template files…\n\n\n[✓] Copying files…\n\n\nFiles created:\n\n\n\n2025.06.16_RNAseq_Example_Repo.qmd\n\n\nThe 2025.06.16_RNAseq_Example_Repo.qmd will be the template for the EDA report. You can rename it if you want. You can now open the .qmd file in your text editor and start editing it.\nIn this case, the qmd file is named the same as the directory you created, eg 2025.06.16_RNAseq_Example_Repo.qmd. If you’ve renamed the qmd, be sure to use the right value for the “$FILE” variable.\nFILE=\"${OUTDIR}.qmd\"\n\necho $FILE\n\n\n\nCreate a private remote repository in the Meshinchi-Lab lab github organization.\n\nThen repository name format is the organization name Meshinchi-Lab/ followed by the name of the analysis directory you just created.\nREPO=\"Meshinchi-Lab/${OUTDIR}\"\n\necho $REPO\nThis will create a variable that is set as the string Meshinchi-Lab/2025.06.17_RNAseq_Example_Repo.\ngh repo create $REPO \\\n--description \"An example py analysis template repo\" \\\n--template \"Meshinchi-Lab/py_analysis_template\" \\\n--clone \\\n--private\nIf gh repo create command is successful, you will see:\n\n✓ Created repository Meshinchi-Lab/2025.06.16_RNAseq_Example_Repo on GitHub https://github.com/Meshinchi-Lab/2025.06.16_RNAseq_Example_Repo ✓ Added remote https://github.com/Meshinchi-Lab/2025.06.16_RNAseq_Example_Repo.git\n\n\nChange directories (cd) into the new github repository you’ve just cloned (by using the --clone argument in step 1).\n\nMake sure to use git pull in order to have your local repository in sync with your new local repository.\ncd $OUTDIR && git pull origin main\nUse the quarto CLI to download the quarto markdown template and follow the prompts:\n\n? Do you trust the authors of this template (Y/n) › Yes\n? Create a subdirectory for template? (Y/n) › No\n\nquarto use template Meshinchi-Lab/py_analysis_template\nYou will see the following output:\n\nDownloading [###################################] 0.0\n\n\n[✓] Downloading\n\n\n[✓] Unzipping\n\n\nPreparing template files…\n\n\n[✓] Copying files…\n\n\nFiles created:\n\n\n\n2025.06.16_RNAseq_Example_Repo.qmd\n\n\nThe 2025.06.16_RNAseq_Example_Repo.qmd will be the template for the EDA report. You can rename it if you want. You can now open the .qmd file in your text editor and start editing it.\nIn this case, the qmd file is named the same as the directory you created, eg 2025.06.16_RNAseq_Example_Repo.qmd. If you’ve renamed the qmd, be sure to use the right value for the “$FILE” variable.\nFILE=\"${OUTDIR}.qmd\"\necho $FILE\nThen convert the qmd template to ipython notebook (.ipynb) that can be used for EDA analyses.\nquarto convert $FILE",
    "crumbs": [
      "Home",
      "Getting Started"
    ]
  },
  {
    "objectID": "git_github_overview.html#install-dependencies-and-render",
    "href": "git_github_overview.html#install-dependencies-and-render",
    "title": "Getting Started",
    "section": "3 Install Dependencies and Render",
    "text": "3 Install Dependencies and Render\n\nRPython\n\n\nCreate a virtual environment using renv and then install the project dependencies.\nRscript -e \"renv::activate()\"\nRscript -e \"renv::restore()\"\nWhen you are ready to render the HTML report, run:\nquarto render $FILE\n\n\nCreate a virtual environment using venv and then install the initial project dependencies.\npython3 -m venv venv \nsource venv/bin/activate \npython3 -m pip install -r requirements.txt\nWhen you are ready to render the HTML report, run:\nIPYNB=\"${OUTDIR}.ipynb\"\necho $IPYNB\nquarto render $IPYNB",
    "crumbs": [
      "Home",
      "Getting Started"
    ]
  },
  {
    "objectID": "git_github_overview.html#commit-changes",
    "href": "git_github_overview.html#commit-changes",
    "title": "Getting Started",
    "section": "4 Commit Changes",
    "text": "4 Commit Changes\n\nFirst, add the quarto analysis template qmd file.\n\nIn this case, the qmd file is named the same as the directory you created, eg “2025.06.16_RNAseq_Example_Repo.qmd”. If you’ve renamed the qmd before committing the file, be sure to use the right name for the “$FILE” variable.\nFILE=\"${OUTDIR}.qmd\"\ngit status\ngit add $FILE\ngit status\n\nCommit the new template qmd file.\n\nAnd use git log to see what changes were made, for example if you come back late to continue.\ngit commit -m \"Added analysis template\"\ngit log --oneline\nWhen you make changes to the analysis qmd and create any new files, you will repeat steps 1 and 2 here. This is summarized in the section below.",
    "crumbs": [
      "Home",
      "Getting Started"
    ]
  },
  {
    "objectID": "git_github_overview.html#summary",
    "href": "git_github_overview.html#summary",
    "title": "Getting Started",
    "section": "5 Summary",
    "text": "5 Summary\nIn summary, after creating the github repository with the analysis quarto template, you will be repeating the commands below as you make edits.\n\nEnsure the virtual environment is up-to-date and activated.\n\nFor R\nRscript -e \"renv::activate()\"\nRscript -e \"renv::status()\"\nFor Python\nsource venv/bin/activate \nwhich python\n\nUse these 5 git commands as you make changes to files, and install software dependencies\n\ngit pull\ngit status\ngit add [MY FILE THAT CHANGED] [A NEW FILE]\ngit commit -m \"describe what changed\"\ngit status\ngit log --oneline",
    "crumbs": [
      "Home",
      "Getting Started"
    ]
  },
  {
    "objectID": "details/software_install_wsl.html",
    "href": "details/software_install_wsl.html",
    "title": "Installation of Software on Windows WSL",
    "section": "",
    "text": "More details on setting up WSL on a Windows PC. Code can be copied and pasted, but be sure to check if there are updated URLs to package releases."
  },
  {
    "objectID": "details/software_install_wsl.html#python",
    "href": "details/software_install_wsl.html#python",
    "title": "Installation of Software on Windows WSL",
    "section": "4.1 Python",
    "text": "4.1 Python\nThis may not be necessary since RStudio server should install python3 as a dependency.\nIf python3 is not installed, which python3 command will not print anything to the terminal. In that case, use apt-get to install python3.\n\nwhich python3  \n\nsudo apt-get install python3 \n\nwhich python3 \nInfo: https://www.rosehosting.com/blog/how-to-install-and-switch-python-versions-on-ubuntu-20-04/"
  },
  {
    "objectID": "details/software_install_wsl.html#github-cli",
    "href": "details/software_install_wsl.html#github-cli",
    "title": "Installation of Software on Windows WSL",
    "section": "4.2 Github CLI",
    "text": "4.2 Github CLI\n\nsudo apt update \n\nsudo apt install gh \n\nwhich gh"
  },
  {
    "objectID": "details/software_install_wsl.html#quarto",
    "href": "details/software_install_wsl.html#quarto",
    "title": "Installation of Software on Windows WSL",
    "section": "4.3 Quarto",
    "text": "4.3 Quarto\n\nmkdir -p $HOME/opt/bin \n\ncd $HOME/opt \n\nwget https://github.com/quarto-dev/quarto-cli/releases/download/v1.7.32/quarto-1.7.32-linux-amd64.deb \n\nsudo dpkg -i quarto-1.7.32-linux-amd64.deb \n\nwhich quarto"
  },
  {
    "objectID": "details/software_install_wsl.html#summary",
    "href": "details/software_install_wsl.html#summary",
    "title": "Installation of Software on Windows WSL",
    "section": "4.4 Summary",
    "text": "4.4 Summary\nOnce the IDEs (Rstudio and VSCode) are installed, as well as the git\nand gh CLI utilities, you are ready to start configuring your git installation by following these steps."
  }
]