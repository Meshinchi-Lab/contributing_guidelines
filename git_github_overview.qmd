---
title: "Getting Started"
format: 
  html:
    code-fold: false
    code-tools: true
author: "Jenny L. Smith"
---

::: callout-tip
## Standardization of Repositories

A description of:

1.  Naming conventions for `github` repositories
2.  Using data analysis notebook quarto templates
3.  Initializing the code repository using `git` and `github`
:::

## Github Repository Naming Conventions

Repositories have the following nomenclature for easy searching:

1.  Exploratory Data Analysis and Research Projects with collaborators:

-   `[YEAR.MONTH.DAY]_[DATA-TYPE]_[SHORT-DESCRIPTION]`

-   Example: '2025.06.02_RNAseq_Bulk_T-ALL'

-   Example with two data types: '2025.06.02_RNAseq_WGS_Bulk_T-ALL'

2.  Genomic Data pipelines and workflows:

-   `[DATA-TYPE]_[DATA-PROCESSING]_[WORKFLOW-TYPE]`

-   Example: 'RNAseq_Fusion_Calling_Nextflow'

3. R packages:

-   `[SHORT-NAME]_R_Package`

-   Example: 'DeGSEA_R_Package'

4. Python packages:

-   `[SHORT-NAME]_Py_Package`

-   Example: 'DataValidator_Py_Package'

## Initializing the Repository

Basic `git` commands to commit and push code to the lab github organization.

0. First create a new directory name following the appropriate naming convention listed above.

``` bash
DATA_TYPE="RNAseq" 
DESCRIPTION="Example_Repo" 
OUTDIR="$(date +%Y.%m.%d)_${DATA_TYPE}_${DESCRIPTION}"

echo $OUTDIR
```

1. Create a ***private*** remote repository in the Meshinchi-Lab lab github organization. 

Then repository name format is the organization name `Meshinchi-Lab/` followed by the name of the analysis directory you just created. 

``` bash
REPO="Meshinchi-Lab/${OUTDIR}"

gh repo create $REPO \
  --description "An example R analysis template repo" \
  --gitignore R \
  --license "MIT" \
  --add-readme \
  --clone \
  --private
```

If it's successful, you will see:
> ✓ Created repository Meshinchi-Lab/2025.06.16_RNAseq_Example_Repo on GitHub
>   https://github.com/Meshinchi-Lab/2025.06.16_RNAseq_Example_Repo
> ✓ Added remote https://github.com/Meshinchi-Lab/2025.06.16_RNAseq_Example_Repo.git


2. Change directories into the new git hub repository you've just cloned (by using the `--clone` argument).

``` bash
cd $OUTDIR
```

## Create the Data Analysis Notebook Template

::: panel-tabset

### R with rmarkdown and quarto

 Then use the quarto CLI to download the analyis quarto markdown document and follow the prompts. Be sure to select 'No' and avoid creating a new subdirectory. 

``` bash
quarto use template Meshinchi-Lab/analysis_template
# ? Do you trust the authors of this template (Y/n) › Yes
# ? Create a subdirectory for template? (Y/n) › No
```

> You will see the following output: \> Downloading \[###################################\] 0.0 \> \[✓\] Downloading \> \[✓\] Unzipping \> Preparing template files... \> \[✓\] Copying files... \> Files created: \> - 2025.06.16_RNAseq_Example_Repo.qmd

The `2025.06.16_RNAseq_Example_Repo.qmd` will be the template for the EDA report. You can rename it if you want. You can now open the `.qmd` file in your text editor and start editing it. When you are ready to render the HTML report, run:

``` bash
quarto render 2025.06.16_RNAseq_Example_Repo.qmd
```

### Python with jupyter notebooks and quarto

Another quarto template!

:::

## Commit and Push to Github

1. First, add the quarto analysis template qmd file. 

In this case, the qmd file is named the same as the directory you created, eg "2025.06.16_RNAseq_Example_Repo.qmd". If you've renamed the qmd before committing the file, be sure to use the right name for the "$FILE" variable.

``` bash
FILE="${OUTDIR}.qmd"
git status
git add $FILE
git status
```

2. Commit the new template qmd file.

``` bash
git commit -m "Added analysis template"
```

When you make changes to the analysis qmd and create any new files, you will repeat steps 1 and 2 here. For brevity, it will essentially be repeating the 5 commands below as you make edits. 

``` bash
git status
git add [MY FILE THAT CHANGED] [A NEW FILE]
git commit -m "describe what changed"
git status
git log --oneline
```

## Code Review and push changes 

We'll be holding weekly code review / code commit gatherings to ensure that we're only committing changes that we expect and have not added any files that may not belong on github, such as PDFs or power point presentations, and especially any sensitive data. 

1. Once we all completed the code review / code commit partner checks, then you can push changes to the repository. 

``` bash
git push 
```

2. check that the repository looks the way you expect it to look using the following command:

``` bash
gh repo view --web "${REPO}"
``` 